[project]
name = "geltest"
description = "Supercharged Python Unittest Runner for Gel"
authors = [
    { name = "Gel Data Inc.", email = "hello@geldata.com" },
    { name = "Gel Contributors" },
]
version = "1.0.0"
requires-python = ">=3.10.0"
readme = "README.rst"
license = { text = "Apache License, Version 2.0" }
keywords = ["gel", "edgedb", "database", "test"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Operating System :: POSIX",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Testing :: Unit",
]
dependencies = [
    'click >= 8.1.0',
    'coverage >= 7.4',
    'typing-extensions >= 4.14.0',
]

[dependency-groups]
# Typecheckers and linters must be pinned exactly
# to avoid cqa breakage in CI.
test = ['mypy==1.17.1', 'ruff==0.12.10']

[project.urls]
homepage = "https://www.geldata.com"
source = "https://github.com/geldata/geltest"
issues = "https://github.com/geldata/geltest/issues"

[project.scripts]
geltest = "geltest.__main__:_main"

[build-system]
requires = ["uv_build>=0.8.13,<0.9.0"]
build-backend = "uv_build"

# ========================
#          MYPY
# ========================

[tool.mypy]
exclude = [
    "^.eggs",
    "^.github",
    "^.vscode",
    "^build",
    "^dist",
    "^docs",
    "^target",
]
files = ["src/**/*.py"]
python_version = "3.10"
follow_imports = "normal"
strict = true
ignore_errors = false
show_error_codes = true
local_partial_types = true

# ========================
#         PYRIGHT
# ========================

[tool.pyright]
include = ["src/**"]
pythonVersion = "3.10"
typeCheckingMode = "standard"

# ========================
#          BLACK
# ========================
[tool.black]
line-length = 79
target-version = ["py310"]

# ========================
#           RUFF
# ========================

[tool.ruff]
line-length = 79
indent-width = 4
target-version = "py310"
exclude = [".github", ".git", "build", "dist", ".eggs"]

[tool.ruff.lint]
preview = true
extend-select = [
    "A",    # flake8-builtins
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "COM",  # flake8-commas
    "DTZ",  # flake8-datetimez
    "E",    # pycodestyle
    "ERA",  # flake8-eradicate
    "F",    # pyflakes
    "FA",   # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "FURB", # refurb
    "G",    # flake8-logging-format
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "LOG",  # flake8-logging
    "PERF", # perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",   # pylint
    "PYI",  # flake8-pyi
    "Q",    # flake8-quotes
    "RUF",  # ruff specific
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "SLOT", # flake8-slots
    "T20",  # flake8-print
    "TC",   # flake8-type-checking
    "UP",   # pyupgrade
    "W",    # warning
]
extend-ignore = [
    "N",       # pep8-naming
    "SIM102",  # collapsible-ifs
    "C408",    # unnecessary-collection-call
    "COM812",  # missing-trailing-comma
    "ISC002",  # multi-line-implicit-string-concatenation
    "PLC0105", # type-name-incorrect-variance
    "PLC0414", # useless-import-alias
    "PLR0904", # too-many-public-methods
    "PLR0911", # too-many-return-statements
    "PLR0912", # too-many-branches
    "PLR0913", # too-many-arguments
    "PLR0914", # too-many-local-variables
    "PLR0915", # too-many-statements
    "PLR0916", # too-many-boolean-expressions
    "PLR1702", # too-many-nested-blocks
    "PLR2004", # magic-value-comparison
    "PLR6301", # no-self-use
    "PLW3201", # bad-dunder-method-name
    "S101",    # assert
    "S404",    # suspicious-subprocess-import
    "S603",    # subprocess-without-shell-equals-true
    "SIM105",  # suppressible-exception
    "SIM117",  # multiple-with-statements
    "UP045",   # non-pep604-annotation-optional
    "PLR5501", # collapsible-else-if
    "PERF203"  # try-except-in-loop
]
